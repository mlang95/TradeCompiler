import pandas as pd
from datetime import datetime, date

class recordedTransaction:
	def __init__(self,spy,account,date,size,ticker,price):
		self.ticker = ticker
		self.price = price
		self.size = size
		self.date = date
		self.spy = spy
		self.account = account
		#self.convertToDate()
		
	def convertToDate(self):
		return datetime.strptime(self.date, "%m/%d/%y")

class tempTrade:
	def __init__(self,spy,account,date,size,ticker,price):
		self.initialDate = date
		self.initialSPY= spy
		self.initialAccount = account
		self.ticker = ticker
		self.buys = []
		self.sells = []
		self.closedDate = None
		self.averageBuyPrice = 0
		self.averageSellPrice = 0
		self.totalShares = 0
		self.portfolioPercent = 0.00
		self.tradeReturn = 0.00
		self.finalSPY = 0
		self.currentShares = 0
		self.isClosed = False
		self.tradeReturn = 0 
		self.initialPrice = price
		self.closingPrice = 0
		self.status = ""
		self.tradeLength = None
	
	def as_dict(self):
		return {"avgBuy":self.averageBuyPrice,"avgsell":self.averageSellPrice,"initialPrice":self.initialPrice,"closingPrice":self.closingPrice,"initialDate":self.initialDate,"initialSPY":self.initialSPY,"initialAccount":self.initialAccount,"ticker":self.ticker,"shares":self.totalShares,"finalSPY":self.finalSPY,"portfolioPercent":self.portfolioPercent,"status":self.status,"duration":self.tradeLength,"return":self.tradeReturn}
	
	def getTradeLength(self):
		self.tradeLength = self.closedDate - self.initialDate
	def getStatus(self):
		if self.isClosed is True:
			self.status = "Closed"
		else:
			self.status = "Open"
	
	def getAverages(self):
		totalShares = sum([buy[1] for buy in self.buys])
		buyPrice = 0
		sellPrice = 0
		for buy in self.buys:
			buyPrice += buy[0]*buy[1]
		for sell in self.sells:
			sellPrice += abs(sell[0]*sell[1])
		self.averageBuyPrice = buyPrice / totalShares
		self.averageSellPrice = sellPrice / totalShares
		self.totalShares = totalShares
	
	def getPercents(self):
		self.portfolioPercent = round((self.averageBuyPrice*self.totalShares)/self.initialAccount * 100,2)
		if self.averageBuyPrice > self.averageSellPrice:
			self.tradeReturn = round((1 - self.averageBuyPrice/self.averageSellPrice) *100,2)
		else:
			self.tradeReturn = round((self.averageSellPrice/self.averageBuyPrice - 1)*100,2)

	def closeTrade(self):
		self.getTradeLength()
		self.getAverages()
		self.getPercents()
		self.isClosed = True
			
def convertListObjectsToDataFrame(list):
	return pd.DataFrame([x.as_dict() for x in list])
			

def main():			
	file = "Portfolio.xlsx"
	Transactions = pd.read_excel(file,sheet_name=1)
	listOfRecordedTransactions = [] #our csv stored
	openTrades = [] 
	closedTrades = []
	currentlyTrading = False
	for index,row in Transactions.iterrows(): #spy,account,date,size,ticker,price
		listOfRecordedTransactions.append(recordedTransaction(row['spy'],row['account'],row['date'],row['size'],row['ticker'],row['price']))
	while len(listOfRecordedTransactions) != 0:
		for record in listOfRecordedTransactions:
			if currentlyTrading is False:
				Trade = tempTrade(record.spy,record.account,record.date,record.size,record.ticker,record.price)
				#print("trade opened",Trade.ticker) 
				currentlyTrading = True
			if Trade.ticker == record.ticker:
				if record.size > 0:
					#print("%s trade added %s shares" % (record.ticker,record.size))
					Trade.buys.append([record.price,record.size])
				else:
					Trade.sells.append([record.price,record.size])
					#print("%s trade sold %s shares" % (record.ticker,abs(record.size)))
				Trade.currentShares += record.size
				if Trade.currentShares == 0:
					Trade.finalSPY = record.spy
					Trade.closedDate = record.date
					Trade.closingPrice = record.price
					Trade.closeTrade()
					Trade.getStatus()
					closedTrades.append(Trade)
					#print("trade closed",Trade.ticker)
					currentlyTrading = False
				listOfRecordedTransactions.remove(record)
				break
		else:
			currentlyTrading = False
			Trade.getStatus()
			openTrades.append(Trade)
	dataframeToExcel = convertListObjectsToDataFrame(closedTrades)
	dataframeToExcel.to_excel(excel_writer="Transactions.xlsx",sheet_name="Sheet1")		
	#for trade in closedTrades:
	#	print("%s opened on %s for $%s, closed on %s for $%s, for return of %s%% with %s shares" % (trade.ticker,trade.initialDate,round(trade.averageBuyPrice,2),trade.closedDate,round(trade.averageSellPrice,2),round(trade.tradeReturn,2)*100,trade.totalShares))
main()

